import { BrowserWindow, app, ipcMain, screen, session, shell } from 'electron';
import Store from 'electron-store';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const is_production = app.isPackaged
const store = new Store();
let token = (store.get<string>('token') as string)
let gro_cookies = (store.get<string>('gro_cookies') as string)
// const base_url = (store.get<string>('base_url') as string) || 'trainingaroradental.curvehero.com'
const base_url = (store.get<string>('base_url') as string) || 'aroradental.curvehero.com'
const base_gro_url = (store.get<string>('base_url') as string) || 'aroradental.curvegro.com'
const test_url = '/cheetah/calendar_event/getPermittedActions'

const createLoginWindow = (_base_url: string, _base_gro_url: string): void => {
  const session_id = `login-${Date.now()}}`
  const login_session = session.fromPartition(session_id)
  const { width, height } = screen.getPrimaryDisplay().workAreaSize

  if (!login_session) {
    return
  }

  const handler = (details: Electron.OnCompletedListenerDetails) => {
    if (details.url.includes(`https://${_base_url}/login/authenticate`)) {
      console.log('authenticated. getting token')
      if (details.statusCode === 200 && details.responseHeaders) {
        const cookie = details.responseHeaders['Set-Cookie'][1]
        token = cookie.split(';')[0].split('=')[1]
        store.set('token', token)
        console.log('Curve Hero Token is: ', token)
        return

      }
    }
  }
  login_session.webRequest.onCompleted({ urls: [`https://${_base_url}/*`] }, handler);
  login_session.webRequest.onSendHeaders({ urls: [`https://${_base_gro_url}/*`] }, (details) => {
    if (details.url.includes(`https://${_base_gro_url}/api/link`)) {
      const cookies = details.requestHeaders['Cookie']
      store.set('gro_cookies', cookies)
      gro_cookies = cookies
      console.log('Curve Gro cookies', cookies)
      createWindow()
      login_window.close()
    }
  })

  const login_window = new BrowserWindow({
    height: height * .75,
    width: width * .75,
    webPreferences: {
      session: login_session,
    },
  })
  console.log('opening curve login page')
  login_window.loadURL(`https://${base_gro_url}`)
}

const testTokenIsValid = async (base_url: string, token: string): Promise<boolean> => {
  return fetch(`https://${base_url}${test_url}`, {
    headers: {
      'Cookie': `curve_hero_session=${token}`
    }
  }).then((response) => {
    if (response.status === 403) {
      console.log('token is invalid')
      return false
    }
    console.log('token is still valid')
    return true
  }).catch((err) => {
    console.log('error checking token', err)
    return false
  })
}


const createWindow = async (): Promise<void> => {
  if (!token || !gro_cookies) {
    return createLoginWindow(base_url, base_gro_url)
  }
  // check if token is valid before opening
  if (!await testTokenIsValid(base_url, token)) {
    store.delete('token')
    store.delete('gro_cookies')
    return createLoginWindow(base_url, base_gro_url)
  }

  // Create the browser window.
  const { width, height } = screen.getPrimaryDisplay().workAreaSize
  const main_session = session.fromPartition('main')
  let mainWindow: BrowserWindow | null = new BrowserWindow({
    height: height * .8,
    width: width * .75,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      session: main_session,
      webSecurity: false,
    },
  });

  main_session.webRequest.onBeforeSendHeaders({
    urls: [`https://${base_url}/*`, `http://*.${base_url}/*`, `https://${base_gro_url}/*`, `http://*.${base_gro_url}/*`]
  }, (details, callback) => {
    details.requestHeaders['Cookie'] = `curve_hero_session=${token};${gro_cookies}`
    callback({
      cancel: false,
      requestHeaders: details.requestHeaders
    })
  })
 
  mainWindow.on('ready-to-show', () => {
    if (!mainWindow) {
      return
    }
    mainWindow.webContents.send('init-response', JSON.stringify({
      base_url,
      base_gro_url,
      token,
      gro_cookies,
    }))
  })

  mainWindow.on('closed', () => {
    mainWindow = null
  })

  ipcMain.on('signout', () => {
    token = ''
    store.delete('token')
    createLoginWindow(base_url, base_gro_url)
    ipcMain.removeAllListeners('signout')
    if (mainWindow) {
      mainWindow.close()
    }
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  if (!is_production) {
    mainWindow.webContents.openDevTools()
  }

  ipcMain.on('init', () => {
    if (!mainWindow) {
      return;
    }
    mainWindow.webContents.send('init_response', JSON.stringify({
      base_url,
      base_gro_url,
      token
    }))
  })

  

  ipcMain.handle('get_from_cache', (_, cache_id) => {
    return store.get(cache_id)
  })

  ipcMain.handle('set_in_cache', (_, cache_id, data) => {
    store.set(cache_id, data)
  })

  ipcMain.handle('delete_from_cache', (_, cache_id) => {
    store.delete(cache_id)
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
